!function(s){function r(){for(var r="",e=document.querySelectorAll('script[type="text/php"]'),t=0;t<e.length;t++)e[t].src?r+=n(e[t]):r+=e[t].textContent+";";console.log(r);i(r);function n(r){var e=o(r.src);if(!(e instanceof Error))return e+";"}}function o(r){var e=new XMLHttpRequest;return e.open("GET",r,!1),e.send(),200!=e.status?(console.error("Can't get file: "+r),new Error("Can't get file: "+r)):e.responseText}function i(r){return(s.transpiler=s.transpiler||new e(s.lexTableSrc)).transpile(r)}function e(r){this.arrayOfSymbols={},this.lexTable=s.getJSON(r,this.arrayOfSymbols),this.lexArray=[],this.errors=[]}s.lexTableSrc="./config/lex_table.json",s.start=r,s.getFileByXHR=o,s.transpileStart=i,s.Transpiler=e,s.TransProto=s.Transpiler.prototype,s.TransProto.transpile=function(r){var e=this.lexer(r);return console.log(e),r},s.getJSON=function(r,t){var e,n=s.getFileByXHR(r);if(n instanceof Error)throw n;n=n.replace(/\\([^"])/gi,"\\\\$1");try{e=JSON.parse(n,function(r,e){return"regex"==r?new RegExp("^"+e):"link"==r?(e in t||(t[e]={}),t[e]=e):e})}catch(r){throw r}return e},document.addEventListener("DOMContentLoaded",r)}(window.trans||(window.trans={})),(window.trans||(window.trans={})).TransProto.lexer=function(r){var e=this.lexTable;for(var t in this.arrayOfSymbols)this.arrayOfSymbols[t]=[];for(var n=1,s=1;0!=r.length;){var o=!1;for(var i in e){var l=new RegExp(e[i].regex),a=l.exec(r);if(a&&0!=a.length)if(e[i].skip)for(o=!0,r=r.replace(l,""),t=0;t<a[0].length;t++)"\n"==a[0][t]&&(n++,s=-1);else if(e[i].list)for(var f in e[i].list)for(var c in e[i].list[f]){var h=e[i].list[f][c];if(h==a[0]){o=!0,this.lexArray.push([h,n,s]),r=r.replace(l,"");break}}else{var p=this.arrayOfSymbols[e[i].link];for(t=0;t<p.length;t++)if(p[t][1]==a[0]){this.lexArray.push([e[i].link,t]),o=!0;break}o||(p.push([p.length,a[0]]),this.lexArray.push([e[i].link,p.length-1,n,s]),o=!0),r=r.replace(l,"")}if(o){s+=a[0].length;break}}if(!o){console.log("Error in line "+n+", colon "+s),console.log(r);var u=r.split(/\s+/);this.errors.push(u[0],n,s),r=r.replace(u[0],"")}}return{Lexems:this.lexArray,Constants:this.arrayOfSymbols,"Error lexems":this.errors}};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
